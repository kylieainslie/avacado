}
# wane_3months <- uniroot(Fk, c(0,1), tau = 92, p = 0.6)$root
wane_8months <- uniroot(Fk, c(0,1), tau = 244, p = 0.6)$root
# contact matrices --------------------------------------------------
path <- "/rivm/s/ainsliek/data/contact_matrices/converted/"
# path <- "inst/extdata/inputs/contact_matrices/converted/"
april_2017     <- readRDS(paste0(path,"transmission_matrix_april_2017.rds"))
april_2020     <- readRDS(paste0(path,"transmission_matrix_april_2020.rds"))
june_2020      <- readRDS(paste0(path,"transmission_matrix_june_2020.rds"))
september_2020 <- readRDS(paste0(path,"transmission_matrix_september_2020.rds"))
# ve estimates ------------------------------------------------------
ve <- read_excel("inst/extdata/inputs/ve_estimates/ve_dat.xlsx", sheet = "wildtype") %>%
group_by(dose, age_group, outcome) %>%
summarise(mean_ve = mean(ve))
ve_inf <- ve %>%
filter(outcome == "infection",
dose == "d2")
ve_hosp <- ve %>%
filter(outcome == "hospitalisation",
dose == "d2")
ve_trans <- ve %>%
filter(outcome == "transmission",
dose == "d2")
# specify initial model parameters ---------------------------------
# parameters must be in a named list
params <- list(N = n_vec,  # population size
# rates
beta = 0.0004,
beta1 = 0.14,
sigma = 0.5,
epsilon = 0.01,
omega = wane_8months,
gamma = i2r,
h = i2h,
i1 = h2ic,
d = h2d,
r = h2r,
i2 = ic2hic,
d_ic = ic2d,
d_hic = hic2d,
r_ic = hic2r,
# simulation start time
calendar_start_date = as.Date("2020-01-01"),
# contact matrices for different levels of NPIs
c_start = april_2017,
c_lockdown = april_2020,
c_relaxed = june_2020,
c_very_relaxed = september_2020,
c_normal = april_2017,
keep_cm_fixed = FALSE,
# IC admission thresholds
thresh_n = 1/100000 * sum(n_vec),
thresh_l = 3/100000 * sum(n_vec),
thresh_m = 10/100000 * sum(n_vec),
thresh_u = 40/100000 * sum(n_vec),
# vaccination parameters
t_vac_start = NULL,
t_vac_end = NULL,
vac_cov = c(rep(0,9)),
eta = 1- ve_inf$mean_ve,
eta_hosp = 1 - ve_hosp$mean_ve,
eta_trans = 1 - ve_trans$mean_ve
)
# Specify initial conditions --------------------------------------
empty_state <- c(rep(0, 9)) # vector of zeros
init <- c(
t = 0,
S = c(n_vec[1:4], n_vec[5]-1, n_vec[6:9]),
Sv = empty_state,
E = empty_state,
Ev = empty_state,
I = c(rep(0,4),1,rep(0,4)),
Iv = empty_state,
H = empty_state,
Hv = empty_state,
IC = empty_state,
ICv = empty_state,
H_IC = empty_state,
H_ICv = empty_state,
D = empty_state,
R = empty_state,
Rv = empty_state,
R_1w = empty_state,
Rv_1w = empty_state,
R_2w = empty_state,
Rv_2w = empty_state,
R_3w = empty_state,
Rv_3w = empty_state
)
# Run forward simulations --------------------------------------------
# Scenario A: no measures
# Scenario B: voluntary
# Scenario C: R < 1 @ high inf rate
# Scenario D: R < 1 @ low inf rate
# Scenario E: zero COVID
t_start <- init[1]
t_end <- t_start + 180
times <- as.integer(seq(t_start, t_end, by = 1))
betas <- readRDS("../vacamole/inst/extdata/results/model_fits/beta_draws.rds")
# sample 100 betas from last time window
betas100 <- sample(betas[[1]]$beta, 100)
i=1
params$beta <- betas100[i]
params$c_start <- april_2017[[i]]
params$keep_cm_fixed <- TRUE # force contact matrix to stay pre-COVID
rk45 <- rkMethod("rk45dp7")
seir_out <- ode(init, times, age_struct_seir_simple, params, method = rk45)
seir_output <- postprocess_age_struct_model_output_simple(seir_output)
seir_output <- postprocess_age_struct_model_output_simple(seir_out)
seir_out <- as.data.frame(seir_out)
seir_output <- postprocess_age_struct_model_output_simple(seir_out)
seir_outcomes <- summarise_results_simple(seir_output, params = params, t_vec = times)
t_vec
t_vec = times
get_foi_simple(x  = seir_output,
y1 = params$eta_trans,
beta = beta_t,
contact_mat = params$c_start,
times = t_vec)
# get force of infection (lambda) --------------------------------------------
calendar_day <- lubridate::yday(as.Date(t_vec, origin = params$calendar_start_date))
beta_t <- params$beta * (1 + params$beta1 * cos(2 * pi * calendar_day / 365.24))
lambda <- get_foi_simple(x  = seir_output,
y1 = params$eta_trans,
beta = beta_t,
contact_mat = params$c_start,
times = t_vec)
params$eta_trans
source("/rivm/s/ainsliek/code/avacado/R/get_foi_simple.R")
lambda <- get_foi_simple(x  = seir_output,
y1 = params$eta_trans,
beta = beta_t,
contact_mat = params$c_start,
times = t_vec)
lambda
seir_outcomes <- summarise_results_simple(seir_output, params = params, t_vec = times)
head(seir_outcomes)
registerDoParallel(cores=15)
n_sim <- 100
# Scenario A: no measures ----
scenarioA <- foreach(i = 1:n_sim) %dopar% {
params$beta <- betas100[i]
params$c_start <- april_2017[[i]]
params$keep_cm_fixed <- TRUE # force contact matrix to stay pre-COVID
rk45 <- rkMethod("rk45dp7")
seir_out <- ode(init, times, age_struct_seir_simple, params, method = rk45)
as.data.frame(seir_out)
}
saveRDS(scenarioA, "/rivm/s/ainsliek/results/covid_scenarios/wave1_scenarioA.rds")
doParallel::stopImplicitCluster()
#scenarioA <- readRDS("C:/Users/ainsliek/Dropbox/Kylie/Projects/RIVM/ECDC Scenario Modelling Hub/round 1/scenarioA.rds")
sim <- length(scenarioA)
sim
# loop over samples and summarise results
outA <- list()
for(s in 1:sim){
seir_output <- postprocess_age_struct_model_output_simple(scenarioA[[s]])
params$beta <- betas100[s]
params$c_start <- april_2017[[s]]
params$keep_cm_fixed <- TRUE
seir_outcomes <- summarise_results_simple(seir_output, params = params, t_vec = times) %>%
mutate(sample = s)
outA[[s]] <- seir_outcomes
}
dfA <- bind_rows(outA) %>%
mutate(scenario_id = "A-Wave1")
dfA
# summarise over all age groups
df_all_age_groups <- dfA %>%
group_by(scenario_id, target_variable, date, sample) %>%
summarise(sum = sum(value)) %>%
ungroup() %>%
group_by(scenario_id, target_variable, date) %>%
summarise(mean  = mean(sum),
q025 = quantile(sum, probs = 0.025),
q975 = quantile(sum, probs = 0.975)) %>%
select(date, scenario_id, target_variable, mean:q975_max)
# summarise over all age groups
df_all_age_groups <- dfA %>%
group_by(scenario_id, target_variable, date, sample) %>%
summarise(sum = sum(value)) %>%
ungroup() %>%
group_by(scenario_id, target_variable, date) %>%
summarise(mean  = mean(sum),
q025 = quantile(sum, probs = 0.025),
q975 = quantile(sum, probs = 0.975)) %>%
select(date, scenario_id, target_variable, mean:q975)
# plot -------------------------------------------------------------------------
p_all <- ggplot(data = df_all_age_groups %>%
filter(target_variable %in% c("inc hosp", "inc icu", "inc death")) %>%
mutate( #scenario_id = factor(scenario_id,
#                    levels = c("C-2022-05-22", "D-2022-05-22",
#                               "A-2022-05-22", "B-2022-05-22")),
target_variable = factor(target_variable,
levels = c("inc infection",
"inc hosp",
"inc icu",
"inc death"))),
aes(x = date, y = mean, color = scenario_id, fill = scenario_id)) +
geom_line() +
geom_ribbon(aes(ymin = q025, ymax = q975), alpha = 0.1, color = NA) +
# scale_color_discrete(limits = c("A-2022-05-22", "B-2022-05-22","C-2022-05-22", "D-2022-05-22")) +
# scale_fill_discrete(limits = c("A-2022-05-22", "B-2022-05-22","C-2022-05-22", "D-2022-05-22")) +
xlab("Date") +
ylab("Mean value") +
#ylim(0,NA) +
scale_x_date(date_breaks = "1 month", date_labels = "%d %b %Y") +
theme(legend.position = "bottom",
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.box="vertical",
axis.title=element_text(size=14,face="bold")) +
guides(fill=guide_legend("Scenario ID"), colour = guide_legend("Scenario ID")) +
facet_wrap(~target_variable, nrow = 1)
p_all
# plot -------------------------------------------------------------------------
p_all <- ggplot(data = df_all_age_groups %>%
# filter(target_variable %in% c("inc hosp", "inc icu", "inc death")) %>%
mutate( #scenario_id = factor(scenario_id,
#                    levels = c("C-2022-05-22", "D-2022-05-22",
#                               "A-2022-05-22", "B-2022-05-22")),
target_variable = factor(target_variable,
levels = c("inc infection",
"inc hosp",
"inc icu",
"inc death"))),
aes(x = date, y = mean, color = scenario_id, fill = scenario_id)) +
geom_line() +
geom_ribbon(aes(ymin = q025, ymax = q975), alpha = 0.1, color = NA) +
# scale_color_discrete(limits = c("A-2022-05-22", "B-2022-05-22","C-2022-05-22", "D-2022-05-22")) +
# scale_fill_discrete(limits = c("A-2022-05-22", "B-2022-05-22","C-2022-05-22", "D-2022-05-22")) +
xlab("Date") +
ylab("Mean value") +
#ylim(0,NA) +
scale_x_date(date_breaks = "1 month", date_labels = "%d %b %Y") +
theme(legend.position = "bottom",
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.box="vertical",
axis.title=element_text(size=14,face="bold")) +
guides(fill=guide_legend("Scenario ID"), colour = guide_legend("Scenario ID")) +
facet_wrap(~target_variable, nrow = 1)
p_all
# plot -------------------------------------------------------------------------
p_all <- ggplot(data = df_all_age_groups %>%
filter(target_variable %in% c("inc infection")) %>%
mutate( #scenario_id = factor(scenario_id,
#                    levels = c("C-2022-05-22", "D-2022-05-22",
#                               "A-2022-05-22", "B-2022-05-22")),
target_variable = factor(target_variable,
levels = c("inc infection",
"inc hosp",
"inc icu",
"inc death"))),
aes(x = date, y = mean, color = scenario_id, fill = scenario_id)) +
geom_line() +
geom_ribbon(aes(ymin = q025, ymax = q975), alpha = 0.1, color = NA) +
# scale_color_discrete(limits = c("A-2022-05-22", "B-2022-05-22","C-2022-05-22", "D-2022-05-22")) +
# scale_fill_discrete(limits = c("A-2022-05-22", "B-2022-05-22","C-2022-05-22", "D-2022-05-22")) +
xlab("Date") +
ylab("Mean value") +
#ylim(0,NA) +
scale_x_date(date_breaks = "1 month", date_labels = "%d %b %Y") +
theme(legend.position = "bottom",
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.box="vertical",
axis.title=element_text(size=14,face="bold")) +
guides(fill=guide_legend("Scenario ID"), colour = guide_legend("Scenario ID")) +
facet_wrap(~target_variable, nrow = 1)
p_all
df_wave1 <- dfA
# summarise over all age groups
df_all <- df_wave1 %>%
#bind_rows(., df_round2_no_boost) %>%
group_by(scenario_id, target_variable, date, sample) %>%
summarise(sum = sum(value)) %>%
ungroup() %>%
mutate(target_variable = factor(target_variable,
levels = c("inc infection", "inc hosp", "inc icu",
"inc death")),
sample = factor(sample))
df_summary <- df_all %>%
group_by(scenario_id, target_variable, date) %>%
summarise(mean  = median(sum),
q025 = quantile(sum, probs = 0.025),
q25  = quantile(sum, probs = 0.25),
q75  = quantile(sum, probs = 0.75),
q975 = quantile(sum, probs = 0.975)
) %>%
select(date, scenario_id, target_variable, mean:q975)
# plot -------------------------------------------------------------------------
# mean line with ribbon
p_ribbon <- ggplot(data = df_summary %>%
filter(target_variable %in% c("inc infection")#,
#date < as.Date("2022-10-01")
), # "inc hosp", "inc icu", "inc death"
aes(x = date, y = mean, color = scenario_id, fill = scenario_id)) +
geom_line() +
geom_ribbon(aes(ymin = q025, ymax = q975), alpha = 0.1, color = NA) +
#geom_ribbon(aes(ymin = q25, ymax = q75), alpha = 0.15, color = NA) +
xlab("Date") +
ylab("Mean value") +
scale_x_date(date_breaks = "1 month", date_labels = "%d %b %Y") +
theme(legend.position = "bottom",
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.box="vertical",
axis.title=element_text(size=14,face="bold")) +
guides(fill=guide_legend("Scenario ID"), colour = guide_legend("Scenario ID")) +
facet_grid(.~target_variable) +
# annotate("rect", xmin = as.Date("2022-09-22"), xmax = as.Date("2022-12-15"), ymin = 0, ymax = 200000,
#          alpha = .5)
geom_vline(xintercept = as.Date("2022-09-15"), linetype = "dashed", color = "grey70")
p_ribbon
# individual lines
p_lines <- ggplot(data = df_all %>%
filter(target_variable %in% c("inc case"),
sample %in% sample(.data$sample, 9)
#scenario_id %in% c("A-2022-07-24", "B-2022-07-24")
), #"inc hosp", "inc icu", "inc death"
aes(x = date,
y = sum,
#group = sample,
color = scenario_id)) +
geom_line() +
facet_wrap(~sample)
p_lines
# individual lines
p_lines <- ggplot(data = df_all %>%
filter(target_variable %in% c("inc infection"),
sample %in% sample(.data$sample, 9)
#scenario_id %in% c("A-2022-07-24", "B-2022-07-24")
), #"inc hosp", "inc icu", "inc death"
aes(x = date,
y = sum,
#group = sample,
color = scenario_id)) +
geom_line() +
facet_wrap(~sample)
p_lines
# individual lines
p_lines <- ggplot(data = df_all %>%
filter(target_variable %in% c("inc infection") #,
#sample %in% sample(.data$sample, 9)
#scenario_id %in% c("A-2022-07-24", "B-2022-07-24")
), #"inc hosp", "inc icu", "inc death"
aes(x = date,
y = sum,
#group = sample,
color = scenario_id)) +
geom_line() #+
#facet_wrap(~sample)
p_lines
p_lines <- ggplot(data = df_all %>%
filter(target_variable %in% c("inc infection") #,
#sample %in% sample(.data$sample, 9)
#scenario_id %in% c("A-2022-07-24", "B-2022-07-24")
), #"inc hosp", "inc icu", "inc death"
aes(x = date,
y = sum,
group = sample,
color = scenario_id)) +
geom_line() #+
#facet_wrap(~sample)
p_lines
w
# determine contact matrix for each time step (to calculate correct FOI below)
# determine contact matrix based on IC admissions
ic_admin <- rowSum(params$i1 * (seir_output$H + seir_output$Hv))
# determine contact matrix for each time step (to calculate correct FOI below)
# determine contact matrix based on IC admissions
ic_admin <- rowSums(params$i1 * (seir_output$H + seir_output$Hv))
head(ic_admin)
f
for(t in 1:length(t_vec)){
# initialise flags
if(t == 1 | params$keep_cm_fixed){
flag_relaxed <- 0
flag_very_relaxed <- 0
flag_normal <- 0
}
# determine contact matrix to use based on criteria
tmp2 <- choose_contact_matrix(params = params,
criteria = ic_admin[t],
flag_relaxed = flag_relaxed,
flag_very_relaxed = flag_very_relaxed,
flag_normal = flag_normal,
keep_fixed = keep_cm_fixed)
contact_mat_list[[t]] <- tmp2$contact_matrix
flag_relaxed <- tmp2$flag_relaxed
flag_very_relaxed <- tmp2$flag_very_relaxed
flag_normal <- tmp2$flag_normal
}
for(t in 1:length(t_vec)){
# initialise flags
if(t == 1 | params$keep_cm_fixed){
flag_relaxed <- 0
flag_very_relaxed <- 0
flag_normal <- 0
}
# determine contact matrix to use based on criteria
tmp2 <- choose_contact_matrix(params = params,
criteria = ic_admin[t],
flag_relaxed = flag_relaxed,
flag_very_relaxed = flag_very_relaxed,
flag_normal = flag_normal,
keep_fixed = params$keep_cm_fixed)
contact_mat_list[[t]] <- tmp2$contact_matrix
flag_relaxed <- tmp2$flag_relaxed
flag_very_relaxed <- tmp2$flag_very_relaxed
flag_normal <- tmp2$flag_normal
}
# determine contact matrix for each time step (to calculate correct FOI below)
contact_mat_list <- list()
for(t in 1:length(t_vec)){
# initialise flags
if(t == 1 | params$keep_cm_fixed){
flag_relaxed <- 0
flag_very_relaxed <- 0
flag_normal <- 0
}
# determine contact matrix to use based on criteria
tmp2 <- choose_contact_matrix(params = params,
criteria = ic_admin[t],
flag_relaxed = flag_relaxed,
flag_very_relaxed = flag_very_relaxed,
flag_normal = flag_normal,
keep_fixed = params$keep_cm_fixed)
contact_mat_list[[t]] <- tmp2$contact_matrix
flag_relaxed <- tmp2$flag_relaxed
flag_very_relaxed <- tmp2$flag_very_relaxed
flag_normal <- tmp2$flag_normal
}
contact_mat_list
params$keep_cm_fixed
# Scenario B: voluntary ----
scenarioB <- foreach(i = 1:n_sim) %dopar% {
params$beta <- betas100[i]
params$c_start <- april_2017[[i]]
params$c_lockdown <- june_2020[[i]]
rk45 <- rkMethod("rk45dp7")
seir_out <- ode(init, times, age_struct_seir_simple, params, method = rk45)
as.data.frame(seir_out)
}
saveRDS(scenarioB, "/rivm/s/ainsliek/results/covid_scenario/wave1_scenarioB.rds")
saveRDS(scenarioB, "/rivm/s/ainsliek/results/covid_scenarios/wave1_scenarioB.rds")
# Scenario B: voluntary ----
registerDoParallel(cores=15)
scenarioB <- foreach(i = 1:n_sim) %dopar% {
params$beta <- betas100[i]
params$c_start <- april_2017[[i]]
params$c_lockdown <- june_2020[[i]]
rk45 <- rkMethod("rk45dp7")
seir_out <- ode(init, times, age_struct_seir_simple, params, method = rk45)
as.data.frame(seir_out)
}
saveRDS(scenarioB, "/rivm/s/ainsliek/results/covid_scenarios/wave1_scenarioB.rds")
doParallel::stopImplicitCluster()
# specify initial model parameters ---------------------------------
# parameters must be in a named list
params <- list(N = n_vec,  # population size
# rates
beta = 0.0004,
beta1 = 0.14,
sigma = 0.5,
epsilon = 0.01,
omega = wane_8months,
gamma = i2r,
h = i2h,
i1 = h2ic,
d = h2d,
r = h2r,
i2 = ic2hic,
d_ic = ic2d,
d_hic = hic2d,
r_ic = hic2r,
# simulation start time
calendar_start_date = as.Date("2020-01-01"),
# contact matrices for different levels of NPIs
c_start = april_2017$mean,
c_lockdown = april_2020$mean,
c_open = april_2017$mean,
keep_cm_fixed = FALSE,
# IC admission thresholds
thresh_o = 1,
thresh_l = 40,
# vaccination parameters
t_vac_start = NULL,
t_vac_end = NULL,
vac_cov = c(rep(0,9)),
eta = 1- ve_inf$mean_ve,
eta_hosp = 1 - ve_hosp$mean_ve,
eta_trans = 1 - ve_trans$mean_ve
)
source("/rivm/s/ainsliek/code/avacado/inst/extdata/scripts/main_script.R")
